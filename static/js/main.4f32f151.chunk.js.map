{"version":3,"sources":["reportWebVitals.ts","ProtofunctionContext.tsx","GlamContext.tsx","ExpressionParser.ts","AsciiMathParser.js","components/InfoDialog.tsx","components/FunctionEntry.tsx","components/LeftSidebar.tsx","Signals.ts","components/PlotArc.tsx","NativeAccess.ts","components/PlotGrid.tsx","components/GraphController.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ProtofunctionType","GlamAppState","limits","focusedArc","selectedArc","drawList","signalReducer","state","action","newState","signal","console","log","JSON","stringify","signalName","debug","arc","window","_glamState","SignalContext","React","createContext","GlamAppContextProvider","props","useReducer","dispatch","Provider","value","children","Protofunction","_id","_name","name","id","parameterName","style","stroke","type","C","text","stack","functionName","jitFunction","drawing","this","ProtofunctionContext","undefined","ProtofunctionContextProvider","oldCtx","update","newCtx","pfId","change","0","ctx","useProtofunction","ctxValue","useContext","StackObjectType","AsciiMathParser","decimalsign","setup_symbols","sort_symbols","greek_letters","relations","constants","concat","left_brackets","asciimath","tex","right_brackets","free_tex","leftright_brackets","left_tex","right_tex","unary_symbols","func","rewriteleftright","acc","atname","atval","binary_symbols","option","rawfirst","non_constant_symbols","by_asciimath","a","b","length","sort","message","pos","neighbourhood","source","slice","Error","token","end","ttype","matches","filter","x","y","str","replace","_source","brackets","arguments","strip_space","tok","bracket","skip_brackets","skipleft","includes","left","skipright","right","middle","middle_asciimath","input","consume","exprs","eof","expr","expression_list","rb","right_bracket","def","lr","leftright_bracket","ss","subsup","push","chr","osource","reduced","re","m","exec","match","expression","comma","exact","negative","negative_expression","first","intermediate_or_fraction","second","c","dash","other_constant","intermediate","frac","ufirst","unbracket","usecond","numerator","denominator","simple","sub_expr","sup_expr","sub","sup","longest","matrix","bracketed_expression","binary","constant","unary","negative_simple","left_bracket","contents","matrix_contents","contents_tex","rows","map","r","join","matrix_tex","is_array","column_desc","leftright","row_length","lb","cells","columns","cell","matrix_cell","row_column_desc","lvert","rvert","l","position","quoted","escape_text","textfn","lb1","rb1","atex","op","arg1","arg2","u","sstex","barg","arg","argtex","raw","greek","number","arbitrary_constant","literal","re_greek","RegExp","re_number","sym","notm","nc","spos","symbol","FunctionDeclarationVisitor","_parser","parser","functionArg","abort","startsWith","visit","unaryExpr","rhsExpr","nameExpr","rightExpr","argExpr","FunctionDefinitionVisitor","_parent","parent","amParser","visitObject","OPERATOR","visitLiteral","Module","_jit_morpheme_mul","bracketExpr","visitBranch","visitUnaryOperation","visitSubsup","fractionExpr","_jit_morpheme_div","leftExpr","visitBinaryOperation","_jit_morpheme_sub","isNaN","parseFloat","IDENTIFIER","morphemeFromSymbol","operator","_jit_morpheme_add","morpheme","NUMBER","exponent","parseResult","_jit_morpheme_exp","object","ExpressionParser","error","R2C","definitionExpr","definitionVisitor","obj","toString","split","charCodeAt","InfoDialog","pf","disassembly","useMemo","mod","ccall","getModule","getModuleLen","ptr","UTF8ToString","_free","className","title","isOpen","onClose","closeCallback","Classes","DIALOG_BODY","vertical","panel","CODE_BLOCK","jitCache","FunctionEntry","n","updatePf","inputRef","useRef","prettyRef","useState","functionSourceOpen","setFunctionSourceOpen","useEffect","current","result","katex","render","throwOnError","displayMode","semanticParser","generateFunctionName","getName","metafactory","FunctionMetafactory","visitStack","visitEnd","install","drawCallback","backgroundColor","onClick","event","newColor","Math","random","minimal","icon","disabled","loading","intent","Intent","NONE","WARNING","ref","onInput","target","LeftSidebar","removeCallback","_build","extra","data","_dataType","t","SigArcFocus","PlotArc","mp","reqR2CMultipoint","res","multipoint","updateMultipoint","points","r2cMultipointGetPoints","address","len","HEAPF64","subarray","f64BufferView","strokeWidth","fill","onMouseOver","onMouseOut","PlotGrid","container","setGridSteps","setOriginGridCoords","setNMajorTicks","viewportCenter","offsetWidth","offsetHeight","_gridSteps","min","ceil","_originGridCoords","width","height","viewBox","preserveAspectRatio","majorInterval","majorTicks","minorTicksPerMajor","minorTicks","hideMinorGrid","PI","PlotAxes","minorInterval","patternUnits","d","x1","y1","x2","y2","Array","keys","fontSize","abs","GraphController","setDrawList","draw","useCallback","remove","addEventListener","ReactDOM","document","querySelector"],"mappings":"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","file":"static/js/main.4f32f151.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {\n    createContext,\n    CSSProperties,\n    Dispatch,\n    ProfilerOnRenderCallback, SetStateAction,\n    useContext,\n    useMemo,\n    useReducer,\n    useState\n} from \"react\";\nimport {StackObject} from \"./ExpressionParser\";\nimport {ptr} from \"./GlamContext\";\nimport {JITFunction} from \"./NativeAccess\";\n\nexport enum ProtofunctionType {\n    C,\n    R2C,\n    C2C,\n}\n\nexport class Protofunction {\n    name: string\n    id: number\n    parameterName: string = \"\"\n    style: CSSProperties = {stroke: \"white\"}\n    type: ProtofunctionType = ProtofunctionType.C\n    text: string = \"\"\n    stack: StackObject[] = []\n    functionName: string = \"\"\n    jitFunction?: JITFunction\n    drawing: boolean = false\n\n    constructor(_id: number, _name: string) {\n        this.id = _id\n        this.name = _name\n    }\n}\n\n\ntype ProtofunctionContextType = Record<number, Protofunction>\n\nconst ProtofunctionContext = React.createContext<[ProtofunctionContextType, Dispatch<UpdateProtofunctionAction>] | undefined>(undefined)\n\ninterface UpdateProtofunctionAction {\n    pfId: number\n    change: any\n}\n\nexport const ProtofunctionContextProvider: React.FC = (props) => {\n    const [ctx, dispatch] = useReducer((oldCtx: ProtofunctionContextType, update: UpdateProtofunctionAction) => {\n        let newCtx = {...oldCtx}\n\n        newCtx[update.pfId] = {\n            ...oldCtx[update.pfId],\n            ...update.change\n        }\n        return newCtx\n    }, {0: new Protofunction(0, \"New Function\")})\n\n    return <ProtofunctionContext.Provider value={[ctx, dispatch]}>\n        {props.children}\n    </ProtofunctionContext.Provider>\n}\n\nexport function useProtofunction(pfId: number): [Protofunction, Dispatch<any>] {\n    const ctxValue = useContext(ProtofunctionContext)\n    if (!ctxValue) {\n        throw \"Protofunction context not provided!\"\n    }\n\n    const [ctx, dispatch] = ctxValue\n\n    return [ctx[pfId], (change: any) => dispatch({pfId: pfId, change: change})]\n}\n","import React, {Dispatch, Reducer, useContext, useMemo, useReducer} from \"react\";\nimport {SigArcFocus, Signal, SS} from \"./Signals\";\nimport {sign} from \"crypto\";\nimport {DictionaryValues} from \"./DictionaryValues\";\nimport {Protofunction} from \"./ProtofunctionContext\";\n\nexport type ptr = number\nexport type f64 = number\nexport type i32 = number\nexport type complex = [number, number]\nexport type functionSupplier = (minX: number, minY: number, maxX: number, maxY: number) => complex[]\n\nexport class GlamAppState {\n    limits: [number, number, number, number] = [-4, -4, 4, 4]\n\n    focusedArc: ptr = 0\n    selectedArc: ptr = 0\n    drawList: number[] = []\n}\n\ninterface ContextContainer {\n    _glamState: GlamAppState\n}\n\nconst signalReducer: Reducer<GlamAppState, Signal> = (state, action) => {\n    let newState = state\n\n    type signalDataType = Parameters<typeof action._dataType>[0]\n    const signal = action as signalDataType\n    console.log(\"DEBUG: signal \" + JSON.stringify(action));\n\n    switch (action.signalName) {\n        case \"Ready\":\n            break;\n        case \"ArcFocus\":\n            console.debug(`focus arc: ${signal.arc}`)\n            newState.focusedArc = signal.arc\n            break;\n    }\n\n    (window as unknown as ContextContainer)._glamState = newState\n    return newState;\n}\n\nexport const SignalContext = React.createContext(null as unknown as [GlamAppState, Dispatch<any>])\n\nexport const GlamAppContextProvider: React.FC = (props) => {\n    const [state, dispatch] = useReducer(signalReducer, new GlamAppState())\n\n    return (\n        <SignalContext.Provider value={[state, dispatch]}>\n        {props.children}\n    </SignalContext.Provider>)\n}\n","import AsciiMathParser from \"./AsciiMathParser\";\nimport {ptr} from \"./GlamContext\";\nimport {ProtofunctionType} from \"./ProtofunctionContext\";\n\ninterface AMExpression {\n    tex: string\n    pos: number\n    end: number\n    ttype: string\n    exprs?: AMExpression[]\n    op?: AMExactExpression\n    arg?: AMExpression\n    dash?: {token: string, ttype: string}\n}\n\ninterface AMBracketExpression extends AMExpression {\n    left: AMExpression\n    middle: AMExpression\n    right: AMExpression\n}\n\ninterface AMExactExpression extends AMExpression {\n    token: string\n}\n\ninterface AMSubSupExpression extends AMExpression {\n    sub?: AMExpression\n    sup?: AMExpression\n}\n\ninterface AMIntermediateExpression extends AMExpression {\n    expression: AMExpression\n    subsup?: AMSubSupExpression // or something else?\n}\n\ninterface AMFractionExpression extends AMExpression {\n    numerator: AMExpression\n    denominator: AMExpression\n}\n\nenum StackObjectType {\n    NUMBER,\n    IDENTIFIER,\n    OPERATOR\n}\n\nexport interface StackObject {\n    value: string | ptr\n    type: StackObjectType\n}\n\nexport interface ExpressionVisitor {\n    visit(expr: AMExpression): void\n}\n\nexport class FunctionDeclarationVisitor implements ExpressionVisitor {\n    parser: ExpressionParser\n\n    constructor(_parser: ExpressionParser) {\n        this.parser = _parser\n\n    }\n\n    visit(expr: AMExpression): AMExpression | null {\n        if (this.parser.functionName || this.parser.functionArg) {\n            this.parser.abort(\"duplicate function definition\")\n            return null\n        }\n\n        if (expr.ttype.startsWith(\"expression\") && expr.exprs && expr.exprs.length === 1) {\n            return this.visit(expr.exprs[0])\n        }\n\n        if (!expr.exprs || expr.exprs.length < 2) {\n            this.parser.abort(\"empty equation\")\n            return null\n        }\n\n        if (expr.exprs![0].ttype === \"unary\") { // special-cased for `f` and `g` for some reason\n            const unaryExpr = expr.exprs![0]\n            const rhsExpr = expr.exprs![1]\n            if (unaryExpr.arg && unaryExpr.arg.ttype === \"bracket\") {\n                if (rhsExpr.exprs && rhsExpr.exprs.length === 2 && rhsExpr.exprs[0].tex === \"=\") {\n                    this.parser.functionArg = (unaryExpr.arg as AMBracketExpression).middle.tex\n                    this.parser.functionName = unaryExpr.op!.token // unary type should guarantee this exists\n                    return rhsExpr.exprs[1]\n                }\n            }\n        } else if (expr.ttype === \"expression\") {\n            if (expr.exprs && expr.exprs.length === 2) {\n                const nameExpr = expr.exprs[0]\n                const rightExpr = expr.exprs[1]\n                if (nameExpr.ttype === \"literal\") {\n                    if (rightExpr.exprs && rightExpr.exprs.length === 2) {\n                        const argExpr = rightExpr.exprs[0]\n                        const rhsExpr = rightExpr.exprs[1]\n                        if (argExpr.ttype === \"bracket\" && rhsExpr.exprs && rhsExpr.exprs.length === 2 && rhsExpr.exprs[0].tex === \"=\") {\n                            this.parser.functionName = nameExpr.tex\n                            this.parser.functionArg = (argExpr as AMBracketExpression).middle.tex\n                            return rhsExpr.exprs[1]\n                        }\n                    }\n                } else {\n                    this.parser.abort(\"illegal function name\")\n                    return null\n                }\n            }\n        }\n        this.parser.abort(\"unable to find function declaration\")\n        return null\n    }\n}\n\nexport class FunctionDefinitionVisitor implements ExpressionVisitor {\n    parser: ExpressionParser\n    parent: ExpressionVisitor\n    amParser = new AsciiMathParser()\n\n    constructor(_parser: ExpressionParser, _parent: ExpressionVisitor) {\n        this.parser = _parser\n        this.parent = _parent\n    }\n\n    visit(expr: AMExpression): void {\n        if (expr.ttype.startsWith(\"expression\") && expr.exprs) {\n            if (expr.exprs.length === 1) {\n                this.visit(expr.exprs[0])\n                return\n            } else if (expr.exprs.length === 2) {\n                if (expr.exprs[0].ttype === \"arbitrary_constant\") {\n                    this.visit(expr.exprs[1])\n                    this.visitObject({type: StackObjectType.OPERATOR, value: expr.exprs[0].tex})\n                    return\n                }\n            }\n        }\n\n        if (expr.dash) {\n            this.visit((expr as AMIntermediateExpression).expression)\n            this.visitLiteral(\"-1\")\n            this.visitObject({type: StackObjectType.OPERATOR, value: Module._jit_morpheme_mul})\n            return\n        }\n\n        if (expr.ttype === \"fraction\") {\n            const fractionExpr = expr as AMFractionExpression\n            if (fractionExpr.numerator && fractionExpr.denominator) {\n                this.visit(fractionExpr.numerator)\n                this.visit(fractionExpr.denominator)\n                this.visitObject({type: StackObjectType.OPERATOR, value: Module._jit_morpheme_div})\n            }\n            return\n        }\n\n        if (expr.ttype === \"literal\" && (!expr.exprs || expr.exprs.length === 0)) {\n            // we're at the end of a branch\n            this.visitLiteral(expr.tex)\n            return\n        }\n\n        if (expr.ttype === \"intermediate\") {\n            const intermediate = expr as AMIntermediateExpression\n            this.visitSubsup(intermediate)\n            return\n        }\n\n        if (expr.ttype === \"bracket\") {\n            const bracketExpr = expr as AMBracketExpression\n            if (!bracketExpr.left || !bracketExpr.right || !bracketExpr.middle) {\n                this.parser.abort(\"incomplete bracket expression\")\n                return\n            }\n\n            if (bracketExpr.left.tex === \"(\" && bracketExpr.right.tex === \")\") {\n                this.visit(bracketExpr.middle)\n                return\n            } else {\n                this.parser.abort(\"unrecognized bracket type\")\n                return\n            }\n        }\n\n        if (expr.exprs && expr.exprs.length === 2) {\n            this.visitBranch(expr)\n            return\n        }\n\n        if (expr.ttype === \"unary\") {\n            this.visitUnaryOperation(expr)\n            return\n        }\n    }\n\n    visitBranch(expr: AMExpression) {\n        if (!expr.exprs || expr.exprs.length < 2) {\n            this.parser.abort(\"not a branch expression\")\n            return\n        }\n\n        const leftExpr = expr.exprs[0]\n        const rightExpr = expr.exprs[1]\n\n        if (leftExpr.ttype === \"literal\" || leftExpr.ttype === \"intermediate\" || leftExpr.ttype === \"bracket\" || leftExpr.ttype === \"fraction\") {\n            if (rightExpr.ttype === \"expression\") {\n                if (rightExpr.exprs![1].tex.startsWith(\"+\") || rightExpr.exprs![1].tex.startsWith(\"-\")) {\n                    this.visitBinaryOperation(leftExpr, Module._jit_morpheme_mul, rightExpr.exprs![0])\n                    this.visit(rightExpr.exprs![1])\n                    return\n                }\n            } else if (rightExpr.ttype === \"negative_expression\") {\n                this.visitBinaryOperation(leftExpr, Module._jit_morpheme_sub, (rightExpr as AMIntermediateExpression).expression)\n                return\n            }\n\n            if (rightExpr.ttype === \"literal\" || rightExpr.ttype === \"intermediate\" || rightExpr.ttype === \"bracket\" || rightExpr.ttype === \"fraction\" || rightExpr.ttype === \"unary\") {\n                if (leftExpr.ttype === \"literal\" && rightExpr.tex === \"i\") {\n                    if (isNaN(parseFloat(leftExpr.tex))) {\n                        this.visitObject({type: StackObjectType.IDENTIFIER, value: leftExpr.tex})\n                        this.visitLiteral(\"i\")\n                        this.visitObject({type: StackObjectType.OPERATOR, value: Module._jit_morpheme_mul})\n                    } else {\n                        this.visitLiteral(leftExpr.tex)\n                        this.visitLiteral(\"i\")\n                        this.visitObject({type: StackObjectType.OPERATOR, value: Module._jit_morpheme_mul})\n                    }\n                    return\n                }\n\n                // two terms adjacent for implied multiplication\n                this.visitBinaryOperation(leftExpr, Module._jit_morpheme_mul, rightExpr)\n                return\n            }\n        }\n\n        if (rightExpr.exprs && rightExpr.exprs.length === 2) {\n            if (rightExpr.exprs[0].ttype === \"arbitrary_constant\") {\n                this.visitBinaryOperation(leftExpr, this.morphemeFromSymbol(rightExpr.exprs[0].tex), rightExpr.exprs[1])\n            }\n        }\n    }\n\n    morphemeFromSymbol(operator: string): ptr {\n        switch (operator) {\n            case \"+\":\n                return Module._jit_morpheme_add\n            case \"-\":\n                return Module._jit_morpheme_sub\n            case \"\\\\cdot\":\n                return Module._jit_morpheme_mul\n            case \"/\":\n                return Module._jit_morpheme_div\n            default:\n                this.parser.abort(\"unrecognized operator \" + operator);\n                return 0\n        }\n    }\n\n    visitBinaryOperation(leftExpr: AMExpression, morpheme: ptr, rightExpr: AMExpression) {\n        this.visit(leftExpr)\n        this.visit(rightExpr)\n        this.visitObject({type: StackObjectType.OPERATOR, value: morpheme})\n    }\n\n    visitUnaryOperation(expr: AMExpression) {\n        if (!expr.arg || !expr.op) {\n            this.parser.abort(\"not a unary operation\")\n            return\n        }\n        this.visit(expr.arg)\n        this.visitObject({type: StackObjectType.OPERATOR, value: expr.op!.token})\n    }\n\n    visitLiteral(literal: string) {\n        if (isNaN(parseFloat(literal))) {\n            this.visitObject({type: StackObjectType.IDENTIFIER, value: literal})\n        } else {\n            this.visitObject({type: StackObjectType.NUMBER, value: literal})\n        }\n    }\n\n    visitSubsup(expr: AMIntermediateExpression) {\n        if (!expr.subsup) {\n            this.parser.abort(\"not a subscript/superscript expression\")\n            return\n        }\n\n        // todo check for integrals and sums here\n\n        if (expr.subsup.sup) { // exponentiation\n            this.visit(expr.expression)\n\n            const exponent = expr.subsup.sup.tex.replace(\"{\", \"\").replace(\"}\", \"\") // we need to parse this again\n            this.amParser.input(exponent)\n            const parseResult = this.amParser.consume()\n            this.visit((parseResult as AMExpression).exprs![0])\n            this.visitObject({type: StackObjectType.OPERATOR, value: Module._jit_morpheme_exp})\n        } else if (expr.subsup.sub) {\n            if (expr.expression.ttype === \"literal\") {\n                this.visitLiteral(expr.expression.tex + \"_\" + expr.subsup.sub!.tex)\n                return\n            } else {\n                this.parser.abort(\"illegal subscript\")\n                return\n            }\n        }\n    }\n\n    visitObject(object: StackObject) {\n        this.parser.stack.push(object)\n    }\n}\n\nexport class ExpressionParser implements ExpressionVisitor {\n    functionName?: string\n    functionArg?: string\n    stack: StackObject[] = []\n    error?: string\n    type?: ProtofunctionType = ProtofunctionType.R2C\n\n    visit(expr: AMExpression): void {\n        const declarationVisitor = new FunctionDeclarationVisitor(this)\n        const definitionExpr = declarationVisitor.visit(expr)\n        const definitionVisitor = new FunctionDefinitionVisitor(this, this)\n        if (definitionExpr) {\n            definitionVisitor.visit(definitionExpr)\n        }\n    }\n\n    abort(error: string) {\n        this.stack = []\n        this.error = error\n    }\n\n    generateFunctionName() {\n        return \"__jit_\" + this.type + \"_\" + this.functionName + \"_\" + this.functionArg + this.stack.map(obj => \"_\" + obj.value.toString().split(\"\").map(c => c.charCodeAt(0)).join(\"\")).join(\"\")\n    }\n}\n","export default class AsciiMathParser {\n    constructor() {\n        this.decimalsign = '\\\\.';\n\n        this.setup_symbols();\n        this.sort_symbols();\n    }\n\n    setup_symbols() {\n        this.greek_letters = ['alpha', 'beta', 'gamma', 'Gamma', 'delta', 'Delta', 'epsilon', 'varepsilon', 'zeta', 'eta', 'theta', 'Theta', 'vartheta', 'iota', 'kappa', 'lambda', 'Lambda', 'mu', 'nu', 'xi', 'Xi', 'pi', 'Pi', 'rho', 'sigma', 'Sigma', 'tau', 'upsilon', 'phi', 'Phi', 'varphi', 'chi', 'psi', 'Psi', 'omega', 'Omega'];\n\n        this.relations = [\n            {\"asciimath\":\":=\",\"tex\":\":=\"},\n            {\"asciimath\":\":|:\",\"tex\":\"\\\\|\"},\n            {\"asciimath\":\"=>\",\"tex\":\"\\\\Rightarrow\"},\n            {\"asciimath\":\"approx\",\"tex\":\"\\\\approx\"},\n            {\"asciimath\":\"~~\",\"tex\":\"\\\\approx\"},\n            {\"asciimath\":\"cong\",\"tex\":\"\\\\cong\"},\n            {\"asciimath\":\"~=\",\"tex\":\"\\\\cong\"},\n            {\"asciimath\":\"equiv\",\"tex\":\"\\\\equiv\"},\n            {\"asciimath\":\"-=\",\"tex\":\"\\\\equiv\"},\n            {\"asciimath\":\"exists\",\"tex\":\"\\\\exists\"},\n            {\"asciimath\":\"EE\",\"tex\":\"\\\\exists\"},\n            {\"asciimath\":\"forall\",\"tex\":\"\\\\forall\"},\n            {\"asciimath\":\"AA\",\"tex\":\"\\\\forall\"},\n            {\"asciimath\":\">=\",\"tex\":\"\\\\ge\"},\n            {\"asciimath\":\"ge\",\"tex\":\"\\\\ge\"},\n            {\"asciimath\":\"gt=\",\"tex\":\"\\\\geq\"},\n            {\"asciimath\":\"geq\",\"tex\":\"\\\\geq\"},\n            {\"asciimath\":\"gt\",\"tex\":\"\\\\gt\"},\n            {\"asciimath\":\"in\",\"tex\":\"\\\\in\"},\n            {\"asciimath\":\"<=\",\"tex\":\"\\\\le\"},\n            {\"asciimath\":\"le\",\"tex\":\"\\\\le\"},\n            {\"asciimath\":\"lt=\",\"tex\":\"\\\\leq\"},\n            {\"asciimath\":\"leq\",\"tex\":\"\\\\leq\"},\n            {\"asciimath\":\"lt\",\"tex\":\"\\\\lt\"},\n            {\"asciimath\":\"models\",\"tex\":\"\\\\models\"},\n            {\"asciimath\":\"|==\",\"tex\":\"\\\\models\"},\n            {\"asciimath\":\"!=\",\"tex\":\"\\\\ne\"},\n            {\"asciimath\":\"ne\",\"tex\":\"\\\\ne\"},\n            {\"asciimath\":\"notin\",\"tex\":\"\\\\notin\"},\n            {\"asciimath\":\"!in\",\"tex\":\"\\\\notin\"},\n            {\"asciimath\":\"prec\",\"tex\":\"\\\\prec\"},\n            {\"asciimath\":\"-lt\",\"tex\":\"\\\\prec\"},\n            {\"asciimath\":\"-<\",\"tex\":\"\\\\prec\"},\n            {\"asciimath\":\"preceq\",\"tex\":\"\\\\preceq\"},\n            {\"asciimath\":\"-<=\",\"tex\":\"\\\\preceq\"},\n            {\"asciimath\":\"propto\",\"tex\":\"\\\\propto\"},\n            {\"asciimath\":\"prop\",\"tex\":\"\\\\propto\"},\n            {\"asciimath\":\"subset\",\"tex\":\"\\\\subset\"},\n            {\"asciimath\":\"sub\",\"tex\":\"\\\\subset\"},\n            {\"asciimath\":\"subseteq\",\"tex\":\"\\\\subseteq\"},\n            {\"asciimath\":\"sube\",\"tex\":\"\\\\subseteq\"},\n            {\"asciimath\":\"succ\",\"tex\":\"\\\\succ\"},\n            {\"asciimath\":\">-\",\"tex\":\"\\\\succ\"},\n            {\"asciimath\":\"succeq\",\"tex\":\"\\\\succeq\"},\n            {\"asciimath\":\">-=\",\"tex\":\"\\\\succeq\"},\n            {\"asciimath\":\"supset\",\"tex\":\"\\\\supset\"},\n            {\"asciimath\":\"sup\",\"tex\":\"\\\\supset\"},\n            {\"asciimath\":\"supseteq\",\"tex\":\"\\\\supseteq\"},\n            {\"asciimath\":\"supe\",\"tex\":\"\\\\supseteq\"},\n            {\"asciimath\":\"vdash\",\"tex\":\"\\\\vdash\"},\n            {\"asciimath\":\"|--\",\"tex\":\"\\\\vdash\"},\n        ]\n\n        this.constants = [\n            {\"asciimath\":\"dt\",\"tex\":\"dt\"},\n            {\"asciimath\":\"dx\",\"tex\":\"dx\"},\n            {\"asciimath\":\"dy\",\"tex\":\"dy\"},\n            {\"asciimath\":\"dz\",\"tex\":\"dz\"},\n            {\"asciimath\":\"prime\",\"tex\":\"'\"},\n            {\"asciimath\":\"implies\",\"tex\":\"\\\\implies\"},\n            {\"asciimath\":\"epsi\",\"tex\":\"\\\\epsilon\"},\n            {\"asciimath\":\"leftrightarrow\",\"tex\":\"\\\\leftrightarrow\"},\n            {\"asciimath\":\"Leftrightarrow\",\"tex\":\"\\\\Leftrightarrow\"},\n            {\"asciimath\":\"rightarrow\",\"tex\":\"\\\\rightarrow\"},\n            {\"asciimath\":\"Rightarrow\",\"tex\":\"\\\\Rightarrow\"},\n            {\"asciimath\":\"backslash\",\"tex\":\"\\\\backslash\"},\n            {\"asciimath\":\"leftarrow\",\"tex\":\"\\\\leftarrow\"},\n            {\"asciimath\":\"Leftarrow\",\"tex\":\"\\\\Leftarrow\"},\n            {\"asciimath\":\"setminus\",\"tex\":\"\\\\setminus\"},\n            {\"asciimath\":\"bigwedge\",\"tex\":\"\\\\bigwedge\"},\n            {\"asciimath\":\"diamond\",\"tex\":\"\\\\diamond\"},\n            {\"asciimath\":\"bowtie\",\"tex\":\"\\\\bowtie\"},\n            {\"asciimath\":\"bigvee\",\"tex\":\"\\\\bigvee\"},\n            {\"asciimath\":\"bigcap\",\"tex\":\"\\\\bigcap\"},\n            {\"asciimath\":\"bigcup\",\"tex\":\"\\\\bigcup\"},\n            {\"asciimath\":\"square\",\"tex\":\"\\\\square\"},\n            {\"asciimath\":\"lamda\",\"tex\":\"\\\\lambda\"},\n            {\"asciimath\":\"Lamda\",\"tex\":\"\\\\Lambda\"},\n            {\"asciimath\":\"aleph\",\"tex\":\"\\\\aleph\"},\n            {\"asciimath\":\"angle\",\"tex\":\"\\\\angle\"},\n            {\"asciimath\":\"frown\",\"tex\":\"\\\\frown\"},\n            {\"asciimath\":\"qquad\",\"tex\":\"\\\\qquad\"},\n            {\"asciimath\":\"cdots\",\"tex\":\"\\\\cdots\"},\n            {\"asciimath\":\"vdots\",\"tex\":\"\\\\vdots\"},\n            {\"asciimath\":\"ddots\",\"tex\":\"\\\\ddots\"},\n            {\"asciimath\":\"cdot\",\"tex\":\"\\\\cdot\"},\n            {\"asciimath\":\"star\",\"tex\":\"\\\\star\"},\n            {\"asciimath\":\"|><|\",\"tex\":\"\\\\bowtie\"},\n            {\"asciimath\":\"circ\",\"tex\":\"\\\\circ\"},\n            {\"asciimath\":\"oint\",\"tex\":\"\\\\oint\"},\n            {\"asciimath\":\"grad\",\"tex\":\"\\\\nabla\"},\n            {\"asciimath\":\"quad\",\"tex\":\"\\\\quad\"},\n            {\"asciimath\":\"uarr\",\"tex\":\"\\\\uparrow\"},\n            {\"asciimath\":\"darr\",\"tex\":\"\\\\downarrow\"},\n            {\"asciimath\":\"downarrow\",\"tex\":\"\\\\downarrow\"},\n            {\"asciimath\":\"rarr\",\"tex\":\"\\\\rightarrow\"},\n            {\"asciimath\":\">->>\",\"tex\":\"\\\\twoheadrightarrowtail\"},\n            {\"asciimath\":\"larr\",\"tex\":\"\\\\leftarrow\"},\n            {\"asciimath\":\"harr\",\"tex\":\"\\\\leftrightarrow\"},\n            {\"asciimath\":\"rArr\",\"tex\":\"\\\\Rightarrow\"},\n            {\"asciimath\":\"lArr\",\"tex\":\"\\\\Leftarrow\"},\n            {\"asciimath\":\"hArr\",\"tex\":\"\\\\Leftrightarrow\"},\n            {\"asciimath\":\"ast\",\"tex\":\"\\\\ast\"},\n            {\"asciimath\":\"***\",\"tex\":\"\\\\star\"},\n            {\"asciimath\":\"|><\",\"tex\":\"\\\\ltimes\"},\n            {\"asciimath\":\"><|\",\"tex\":\"\\\\rtimes\"},\n            {\"asciimath\":\"^^^\",\"tex\":\"\\\\bigwedge\"},\n            {\"asciimath\":\"vvv\",\"tex\":\"\\\\bigvee\"},\n            {\"asciimath\":\"cap\",\"tex\":\"\\\\cap\"},\n            {\"asciimath\":\"nnn\",\"tex\":\"\\\\bigcap\"},\n            {\"asciimath\":\"cup\",\"tex\":\"\\\\cup\"},\n            {\"asciimath\":\"uuu\",\"tex\":\"\\\\bigcup\"},\n            {\"asciimath\":\"not\",\"tex\":\"\\\\neg\"},\n            {\"asciimath\":\"<=>\",\"tex\":\"\\\\Leftrightarrow\"},\n            {\"asciimath\":\"_|_\",\"tex\":\"\\\\bot\"},\n            {\"asciimath\":\"bot\",\"tex\":\"\\\\bot\"},\n            {\"asciimath\":\"int\",\"tex\":\"\\\\int\"},\n            {\"asciimath\":\"del\",\"tex\":\"\\\\partial\"},\n            {\"asciimath\":\"...\",\"tex\":\"\\\\ldots\"},\n            {\"asciimath\":\"/_\\\\\",\"tex\":\"\\\\triangle\"},\n            {\"asciimath\":\"|__\",\"tex\":\"\\\\lfloor\"},\n            {\"asciimath\":\"__|\",\"tex\":\"\\\\rfloor\"},\n            {\"asciimath\":\"dim\",\"tex\":\"\\\\dim\"},\n            {\"asciimath\":\"mod\",\"tex\":\"\\\\operatorname{mod}\"},\n            {\"asciimath\":\"lub\",\"tex\":\"\\\\operatorname{lub}\"},\n            {\"asciimath\":\"glb\",\"tex\":\"\\\\operatorname{glb}\"},\n            {\"asciimath\":\">->\",\"tex\":\"\\\\rightarrowtail\"},\n            {\"asciimath\":\"->>\",\"tex\":\"\\\\twoheadrightarrow\"},\n            {\"asciimath\":\"|->\",\"tex\":\"\\\\mapsto\"},\n            {\"asciimath\":\"lim\",\"tex\":\"\\\\lim\"},\n            {\"asciimath\":\"Lim\",\"tex\":\"\\\\operatorname{Lim}\"},\n            {\"asciimath\":\"and\",\"tex\":\"\\\\quad\\\\text{and}\\\\quad\"},\n            {\"asciimath\":\"**\",\"tex\":\"\\\\ast\"},\n            {\"asciimath\":\"//\",\"tex\":\"/\"},\n            {\"asciimath\":\"\\\\\",\"tex\":\"\\\\,\"},\n            {\"asciimath\":\"\\\\\\\\\",\"tex\":\"\\\\backslash\"},\n            {\"asciimath\":\"xx\",\"tex\":\"\\\\times\"},\n            {\"asciimath\":\"-:\",\"tex\":\"\\\\div\"},\n            {\"asciimath\":\"o+\",\"tex\":\"\\\\oplus\"},\n            {\"asciimath\":\"ox\",\"tex\":\"\\\\otimes\"},\n            {\"asciimath\":\"o.\",\"tex\":\"\\\\odot\"},\n            {\"asciimath\":\"^\",\"tex\":\"\\\\hat{}\"},\n            {\"asciimath\":\"_\",\"tex\":\"\\\\_\"},\n            {\"asciimath\":\"^^\",\"tex\":\"\\\\wedge\"},\n            {\"asciimath\":\"vv\",\"tex\":\"\\\\vee\"},\n            {\"asciimath\":\"nn\",\"tex\":\"\\\\cap\"},\n            {\"asciimath\":\"uu\",\"tex\":\"\\\\cup\"},\n            {\"asciimath\":\"TT\",\"tex\":\"\\\\top\"},\n            {\"asciimath\":\"+-\",\"tex\":\"\\\\pm\"},\n            {\"asciimath\":\"O/\",\"tex\":\"\\\\emptyset\"},\n            {\"asciimath\":\"oo\",\"tex\":\"\\\\infty\"},\n            {\"asciimath\":\":.\",\"tex\":\"\\\\therefore\"},\n            {\"asciimath\":\":'\",\"tex\":\"\\\\because\"},\n            {\"asciimath\":\"/_\",\"tex\":\"\\\\angle\"},\n            {\"asciimath\":\"|~\",\"tex\":\"\\\\lceil\"},\n            {\"asciimath\":\"~|\",\"tex\":\"\\\\rceil\"},\n            {\"asciimath\":\"CC\",\"tex\":\"\\\\mathbb{C}\"},\n            {\"asciimath\":\"NN\",\"tex\":\"\\\\mathbb{N}\"},\n            {\"asciimath\":\"QQ\",\"tex\":\"\\\\mathbb{Q}\"},\n            {\"asciimath\":\"RR\",\"tex\":\"\\\\mathbb{R}\"},\n            {\"asciimath\":\"ZZ\",\"tex\":\"\\\\mathbb{Z}\"},\n            {\"asciimath\":\"->\",\"tex\":\"\\\\to\"},\n            {\"asciimath\":\"or\",\"tex\":\"\\\\quad\\\\text{or}\\\\quad\"},\n            {\"asciimath\":\"if\",\"tex\":\"\\\\quad\\\\text{if}\\\\quad\"},\n            {\"asciimath\":\"iff\", \"tex\":\"\\\\iff\"},\n            {\"asciimath\":\"*\",\"tex\":\"\\\\cdot\"},\n            {\"asciimath\":\"@\",\"tex\":\"\\\\circ\"},\n            {\"asciimath\":\"%\",\"tex\":\"\\\\%\"},\n            {\"asciimath\":\"boxempty\",\"tex\":\"\\\\square\"},\n            {\"asciimath\":\"lambda\",\"tex\":\"\\\\lambda\"},\n            {\"asciimath\":\"Lambda\",\"tex\":\"\\\\Lambda\"},\n            {\"asciimath\":\"nabla\",\"tex\":\"\\\\nabla\"},\n            {\"asciimath\":\"uparrow\",\"tex\":\"\\\\uparrow\"},\n            {\"asciimath\":\"downarrow\",\"tex\":\"\\\\downarrow\"},\n            {\"asciimath\":\"twoheadrightarrowtail\",\"tex\":\"\\\\twoheadrightarrowtail\"},\n            {\"asciimath\":\"ltimes\",\"tex\":\"\\\\ltimes\"},\n            {\"asciimath\":\"rtimes\",\"tex\":\"\\\\rtimes\"},\n            {\"asciimath\":\"neg\",\"tex\":\"\\\\neg\"},\n            {\"asciimath\":\"partial\",\"tex\":\"\\\\partial\"},\n            {\"asciimath\":\"ldots\",\"tex\":\"\\\\ldots\"},\n            {\"asciimath\":\"triangle\",\"tex\":\"\\\\triangle\"},\n            {\"asciimath\":\"lfloor\",\"tex\":\"\\\\lfloor\"},\n            {\"asciimath\":\"rfloor\",\"tex\":\"\\\\rfloor\"},\n            {\"asciimath\":\"rightarrowtail\",\"tex\":\"\\\\rightarrowtail\"},\n            {\"asciimath\":\"twoheadrightarrow\",\"tex\":\"\\\\twoheadrightarrow\"},\n            {\"asciimath\":\"mapsto\",\"tex\":\"\\\\mapsto\"},\n            {\"asciimath\":\"times\",\"tex\":\"\\\\times\"},\n            {\"asciimath\":\"div\",\"tex\":\"\\\\div\"},\n            {\"asciimath\":\"divide\",\"tex\":\"\\\\div\"},\n            {\"asciimath\":\"oplus\",\"tex\":\"\\\\oplus\"},\n            {\"asciimath\":\"otimes\",\"tex\":\"\\\\otimes\"},\n            {\"asciimath\":\"odot\",\"tex\":\"\\\\odot\"},\n            {\"asciimath\":\"wedge\",\"tex\":\"\\\\wedge\"},\n            {\"asciimath\":\"vee\",\"tex\":\"\\\\vee\"},\n            {\"asciimath\":\"top\",\"tex\":\"\\\\top\"},\n            {\"asciimath\":\"pm\",\"tex\":\"\\\\pm\"},\n            {\"asciimath\":\"emptyset\",\"tex\":\"\\\\emptyset\"},\n            {\"asciimath\":\"infty\",\"tex\":\"\\\\infty\"},\n            {\"asciimath\":\"therefore\",\"tex\":\"\\\\therefore\"},\n            {\"asciimath\":\"because\",\"tex\":\"\\\\because\"},\n            {\"asciimath\":\"lceil\",\"tex\":\"\\\\lceil\"},\n            {\"asciimath\":\"rceil\",\"tex\":\"\\\\rceil\"},\n            {\"asciimath\":\"to\",\"tex\":\"\\\\to\"},\n            {\"asciimath\":\"langle\",\"tex\":\"\\\\langle\"},\n            {\"asciimath\":\"lceiling\",\"tex\":\"\\\\lceil\"},\n            {\"asciimath\":\"rceiling\",\"tex\":\"\\\\rceil\"},\n            {\"asciimath\":\"max\",\"tex\":\"\\\\max\"},\n            {\"asciimath\":\"min\",\"tex\":\"\\\\min\"},\n            {\"asciimath\":\"prod\",\"tex\":\"\\\\prod\"},\n            {\"asciimath\":\"sum\",\"tex\":\"\\\\sum\"},\n        ];\n        this.constants = this.constants.concat(this.relations);\n\n        this.left_brackets = [\n            {asciimath: 'langle', tex: '\\\\langle'},\n            {asciimath: '(:', tex: '\\\\langle'},\n            {asciimath: '<<', tex: '\\\\langle'},\n            {asciimath: '{:', tex: '.'},\n            {asciimath: '(', tex: '('},\n            {asciimath: '[', tex: '['},\n            {asciimath: '{', tex: '\\\\lbrace'},\n            {asciimath: 'lbrace', tex: '\\\\lbrace'},\n        ];\n        this.right_brackets = [\n            {asciimath: 'rangle', tex: '\\\\rangle'},\n            {asciimath: ':)', tex: '\\\\rangle'},\n            {asciimath: '>>', tex: '\\\\rangle'},\n            {asciimath: ':}', tex: '.', free_tex: ':\\\\}'},\n            {asciimath: ')', tex: ')'},\n            {asciimath: ']', tex: ']'},\n            {asciimath: '}', tex: '\\\\rbrace'},\n            {asciimath: 'rbrace', tex: '\\\\rbrace'},\n        ];\n        this.leftright_brackets = [\n            {asciimath: '|', left_tex: '\\\\lvert', right_tex: '\\\\rvert', free_tex: '|'},\n        ];\n\n        this.unary_symbols = [\n            {asciimath: \"sqrt\", tex: \"\\\\sqrt\"},\n            {asciimath: \"f\", tex:\"f\", func:true},\n            {asciimath: \"g\", tex:\"g\", func:true},\n            {asciimath: \"sin\", tex:\"\\\\sin\", func:true},\n            {asciimath: \"cos\", tex:\"\\\\cos\", func:true},\n            {asciimath: \"tan\", tex:\"\\\\tan\", func:true},\n            {asciimath: \"arcsin\", tex:\"\\\\arcsin\", func:true},\n            {asciimath: \"arccos\", tex:\"\\\\arccos\", func:true},\n            {asciimath: \"arctan\", tex:\"\\\\arctan\", func:true},\n            {asciimath: \"sinh\", tex:\"\\\\sinh\", func:true},\n            {asciimath: \"cosh\", tex:\"\\\\cosh\", func:true},\n            {asciimath: \"tanh\", tex:\"\\\\tanh\", func:true},\n            {asciimath: \"cot\", tex:\"\\\\cot\", func:true},\n            {asciimath: \"coth\", tex:\"\\\\coth\", func:true},\n            {asciimath: \"sech\", tex:\"\\\\operatorname{sech}\", func:true},\n            {asciimath: \"csch\", tex:\"\\\\operatorname{csch}\", func:true},\n            {asciimath: \"sec\", tex:\"\\\\sec\", func:true},\n            {asciimath: \"csc\", tex:\"\\\\csc\", func:true},\n            {asciimath: \"log\", tex:\"\\\\log\", func:true},\n            {asciimath: \"ln\", tex:\"\\\\ln\", func:true},\n            {asciimath: \"abs\", rewriteleftright:[\"|\",\"|\"]},\n            {asciimath: \"norm\", rewriteleftright:[\"\\\\|\",\"\\\\|\"]},\n            {asciimath: \"floor\", rewriteleftright:[\"\\\\lfloor\",\"\\\\rfloor\"]},\n            {asciimath: \"ceil\", rewriteleftright:[\"\\\\lceil\",\"\\\\rceil\"]},\n            {asciimath: \"Sin\", tex:\"\\\\Sin\", func:true},\n            {asciimath: \"Cos\", tex:\"\\\\Cos\", func:true},\n            {asciimath: \"Tan\", tex:\"\\\\Tan\", func:true},\n            {asciimath: \"Arcsin\", tex:\"\\\\Arcsin\", func:true},\n            {asciimath: \"Arccos\", tex:\"\\\\Arccos\", func:true},\n            {asciimath: \"Arctan\", tex:\"\\\\Arctan\", func:true},\n            {asciimath: \"Sinh\", tex:\"\\\\Sinh\", func:true},\n            {asciimath: \"Cosh\", tex:\"\\\\Cosh\", func:true},\n            {asciimath: \"Tanh\", tex:\"\\\\Tanh\", func:true},\n            {asciimath: \"Cot\", tex:\"\\\\Cot\", func:true},\n            {asciimath: \"Sec\", tex:\"\\\\Sec\", func:true},\n            {asciimath: \"Csc\", tex:\"\\\\Csc\", func:true},\n            {asciimath: \"Log\", tex:\"\\\\Log\", func:true},\n            {asciimath: \"Ln\", tex:\"\\\\Ln\", func:true},\n            {asciimath: \"Abs\", tex:\"\\\\Abs\", rewriteleftright:[\"|\",\"|\"]},\n            {asciimath: \"det\", tex:\"\\\\det\", func:true},\n            {asciimath: \"exp\", tex:\"\\\\exp\", func:true},\n            {asciimath: \"gcd\", tex:\"\\\\gcd\", func:true},\n            {asciimath:\"lcm\", tex:\"\\\\operatorname{lcm}\", func:true},\n            {asciimath: \"cancel\", tex:\"\\\\cancel\"},\n            {asciimath: \"Sqrt\", tex:\"\\\\Sqrt\"},\n            {asciimath: \"hat\", tex:\"\\\\hat\", acc:true},\n            {asciimath:\"bar\", tex:\"\\\\overline\", acc:true},\n            {asciimath:\"overline\", tex:\"\\\\overline\", acc:true},\n            {asciimath: \"vec\", tex:\"\\\\vec\", acc:true},\n            {asciimath: \"tilde\", tex:\"\\\\tilde\", acc:true},\n            {asciimath: \"dot\", tex:\"\\\\dot\", acc:true},\n            {asciimath: \"ddot\", tex:\"\\\\ddot\", acc:true},\n            {asciimath:\"ul\", tex:\"\\\\underline\", acc:true},\n            {asciimath:\"underline\", tex:\"\\\\underline\", acc:true},\n            {asciimath:\"ubrace\", tex:\"\\\\underbrace\", acc:true},\n            {asciimath:\"underbrace\", tex:\"\\\\underbrace\", acc:true},\n            {asciimath:\"obrace\", tex:\"\\\\overbrace\", acc:true},\n            {asciimath:\"overbrace\", tex:\"\\\\overbrace\", acc:true},\n            {asciimath:\"bb\", atname:\"mathvariant\", atval:\"bold\", tex:\"\\\\mathbf\"},\n            {asciimath: \"mathbf\", atname:\"mathvariant\", atval:\"bold\", tex:\"mathbf\"},\n            {asciimath:\"sf\", atname:\"mathvariant\", atval:\"sans-serif\", tex:\"\\\\mathsf\"},\n            {asciimath: \"mathsf\", atname:\"mathvariant\", atval:\"sans-serif\", tex:\"mathsf\"},\n            {asciimath:\"bbb\", atname:\"mathvariant\", atval:\"double-struck\", tex:\"\\\\mathbb\"},\n            {asciimath: \"mathbb\", atname:\"mathvariant\", atval:\"double-struck\", tex:\"\\\\mathbb\"},\n            {asciimath:\"cc\", atname:\"mathvariant\", atval:\"script\", tex:\"\\\\mathcal\"},\n            {asciimath: \"mathcal\", atname:\"mathvariant\", atval:\"script\", tex:\"\\\\mathcal\"},\n            {asciimath:\"tt\", atname:\"mathvariant\", atval:\"monospace\", tex:\"\\\\mathtt\"},\n            {asciimath: \"mathtt\", atname:\"mathvariant\", atval:\"monospace\", tex:\"\\\\mathtt\"},\n            {asciimath:\"fr\", atname:\"mathvariant\", atval:\"fraktur\", tex:\"\\\\mathfrak\"},\n            {asciimath: \"mathfrak\", atname:\"mathvariant\", atval:\"fraktur\", tex:\"\\\\mathfrak\"},\n        ];\n\n        this.binary_symbols = [\n            {asciimath: \"root\", tex:\"\\\\sqrt\", option: true},\n            {asciimath: \"frac\",    tex:\"\\\\frac\"},\n            {asciimath: \"stackrel\", tex:\"\\\\stackrel\"},\n            {asciimath: \"overset\", tex:\"\\\\overset\"},\n            {asciimath: \"underset\", tex:\"\\\\underset\"},\n            {asciimath:\"color\", tex: \"\\\\color\", rawfirst: true},\n        ]\n\n        this.non_constant_symbols = ['_','^','/'];\n\n    }\n\n    sort_symbols() {\n        // eslint-disable-next-line no-unused-expressions\n        const by_asciimath = (a,b)=>{a=a.asciimath.length,b=b.asciimath.length; return a>b ? -1 : a<b ? 1 : 0};\n        this.constants.sort(by_asciimath);\n        this.relations.sort(by_asciimath);\n        this.left_brackets.sort(by_asciimath);\n        this.right_brackets.sort(by_asciimath);\n        this.leftright_brackets.sort(by_asciimath);\n        this.unary_symbols.sort(by_asciimath);\n        this.binary_symbols.sort(by_asciimath);\n    }\n\n    error(message, pos) {\n        const neighbourhood = this.source(pos).slice(0,5);\n        throw(new Error(`Error at character ${pos} near \"${neighbourhood}\": ${message}`));\n    }\n\n    literal(token) {\n        if(token) {\n            return {tex: token.token, pos: token.pos, end: token.end, ttype: 'literal'};\n        }\n    }\n\n    longest(matches) {\n        matches = matches.filter(x=>!!x);\n        matches.sort((x,y)=>{\n            x=x.end;\n            y=y.end;\n            return x>y ? -1 : x<y ? 1 : 0;\n        });\n        return matches[0];\n    }\n\n    escape_text(str) {\n        return str\n            .replace(/\\{/g,'\\\\{')\n            .replace(/\\}/g,'\\\\}')\n            ;\n    }\n\n    input(str) {\n        this._source = str;\n        this.brackets = [];\n    }\n\n    source(pos = 0,end) {\n        if(arguments.length>1) {\n            return this._source.slice(pos,end);\n        } else {\n            return this._source.slice(pos);\n        }\n    }\n\n    eof(pos = 0) {\n        pos = this.strip_space(pos);\n        return pos == this._source.length;\n    }\n\n    unbracket(tok) {\n        if(!tok) {\n            return;\n        }\n        if(!tok.bracket) {\n            return tok;\n        }\n\n        const skip_brackets = ['(',')','[',']','{','}'];\n        const skipleft = skip_brackets.includes(tok.left.asciimath);\n        const skipright = skip_brackets.includes(tok.right.asciimath);\n        const pos = skipleft ? tok.left.end : tok.pos;\n        const end = skipright ? tok.right.pos : tok.end;\n        let left = skipleft ? '' : tok.left.tex;\n        let right = skipright ? '' : tok.right.tex;\n        const middle = tok.middle ? tok.middle.tex : '';\n        if(left || right) {\n            left = left || '.';\n            right = right || '.';\n            return {tex: `\\\\left ${left} ${middle} \\\\right ${right}`, pos: tok.pos, end: tok.end};\n        } else {\n            return {tex: middle, pos: tok.pos, end: tok.end, middle_asciimath: this.source(pos,end)};\n        }\n    }\n\n    parse(str) {\n        this.input(str);\n        const result = this.consume();\n        return result.tex;\n    }\n\n    consume(pos = 0) {\n        let tex = '';\n        const exprs = [];\n        while(!this.eof(pos)) {\n            let expr = this.expression_list(pos);\n            if(!expr) {\n                const rb = this.right_bracket(pos);\n                if(rb) {\n                    if(rb.def.free_tex) {\n                        rb.tex = rb.def.free_tex;\n                    }\n                    expr = rb;\n\n                }\n                const lr = this.leftright_bracket(pos);\n                if(lr) {\n                    expr = lr;\n                    const ss = this.subsup(lr.end);\n                    if(ss) {\n                        expr = {tex: `${expr.tex}${ss.tex}`, pos: pos, end: ss.end, ttype: 'expression'}\n                    }\n                }\n            }\n            if(expr) {\n                if(tex) {\n                    tex += ' ';\n                }\n                tex += expr.tex;\n                pos = expr.end;\n                exprs.push(expr);\n            } else if(!this.eof(pos)) {\n                const chr = this.source(pos,pos+1);\n                exprs.push({tex: chr, pos: pos, ttype: 'character'});\n                tex += chr;\n                pos += 1;\n            }\n        }\n        return {tex: tex, exprs: exprs};\n    }\n\n    strip_space(pos = 0) {\n        const osource = this.source(pos);\n        const reduced = osource.replace(/^(\\s|\\\\(?!\\\\))*/,'');\n        return pos + osource.length - reduced.length;\n    }\n\n    /* Does the given regex match next?\n     */\n    match(re, pos) {\n        pos = this.strip_space(pos);\n        const m = re.exec(this.source(pos));\n        if(m) {\n            const token = m[0];\n            return {token: token, pos: pos, match: m, end: pos+token.length, ttype: 'regex'};\n        }\n    }\n\n    /* Does the exact given string occur next?\n     */\n    exact(str, pos) {\n        pos = this.strip_space(pos);\n        if(this.source(pos).slice(0, str.length) == str) {\n            return {token: str, pos: pos, end: pos+str.length, ttype: 'exact'};\n        }\n    }\n\n    expression_list(pos = 0) {\n        let expr = this.expression(pos);\n        if(!expr) {\n            return;\n        }\n        let end = expr.end;\n        let tex = expr.tex;\n        let exprs = [expr];\n        while(!this.eof(end)) {\n            const comma = this.exact(\",\",end);\n            if(!comma) {\n                break;\n            }\n            tex += ' ,';\n            end = comma.end;\n            expr = this.expression(end);\n            if(!expr) {\n                break;\n            }\n            tex += ' '+expr.tex;\n            exprs.push(expr);\n            end = expr.end;\n        }\n        return {tex: tex, pos: pos, end: end, exprs: exprs, ttype: 'expression_list'};\n    }\n\n    // E ::= IE | I/I                       Expression\n    expression(pos = 0) {\n        const negative = this.negative_expression(pos);\n        if(negative) {\n            return negative;\n        }\n        const first = this.intermediate_or_fraction(pos);\n        if(!first) {\n            for(let c of this.non_constant_symbols) {\n                const m = this.exact(c,pos);\n                if(m) {\n                    return {tex: c, pos: pos, end: m.end, ttype: 'constant'};\n                }\n            }\n            return;\n        }\n        if(this.eof(first.end)) {\n            return first;\n        }\n        const second = this.expression(first.end);\n        if(second) {\n            return {tex: first.tex+' '+second.tex, pos: first.pos, end: second.end, ttype: 'expression', exprs: [first,second]};\n        } else {\n            return first;\n        }\n    }\n\n    negative_expression(pos = 0) {\n        const dash = this.exact(\"-\",pos);\n        if(dash && !this.other_constant(pos)) {\n            const expr = this.expression(dash.end);\n            if(expr) {\n                return {tex: `- ${expr.tex}`, pos: pos, end: expr.end, ttype: 'negative_expression', dash: dash, expression: expr}\n            } else {\n                return {tex: '-', pos: pos, end: dash.end, ttype: 'constant'};\n            }\n        }\n    }\n\n    intermediate_or_fraction(pos = 0) {\n        const first = this.intermediate(pos);\n        if(!first) {\n            return;\n        }\n        let frac = this.match(/^\\/(?!\\/)/,first.end);\n        if(frac) {\n            const second = this.intermediate(frac.end);\n            if(second) {\n                const ufirst = this.unbracket(first);\n                const usecond = this.unbracket(second);\n                return {tex: `\\\\frac{${ufirst.tex}}{${usecond.tex}}`, pos: first.pos, end: second.end, ttype: 'fraction', numerator: ufirst, denominator: usecond};\n            } else {\n                const ufirst = this.unbracket(first);\n                return {tex: `\\\\frac{${ufirst.tex}}{}`, pos: first.pos, end: frac.end, ttype: 'fraction', numerator: ufirst, denominator: null};\n            }\n        } else {\n            return first;\n        }\n    }\n\n    // I ::= S_S | S^S | S_S^S | S          Intermediate expression\n    intermediate(pos = 0) {\n        const first = this.simple(pos);\n        if(!first) {\n            return;\n        }\n        const ss = this.subsup(first.end);\n        if(ss) {\n            return {tex: `${first.tex}${ss.tex}`, pos:pos, end:ss.end, ttype: 'intermediate', expression: first, subsup: ss};\n        } else {\n            return first;\n        }\n    }\n\n    subsup(pos = 0) {\n        let tex = '';\n        let end = pos;\n        let sub = this.exact('_',pos);\n        let sub_expr, sup_expr;\n        if(sub) {\n            sub_expr = this.unbracket(this.simple(sub.end));\n            if(sub_expr) {\n                tex = `${tex}_{${sub_expr.tex}}`;\n                end = sub_expr.end;\n            } else {\n                tex = `${tex}_{}`;\n                end = sub.end;\n            }\n        }\n        let sup = this.match(/^\\^(?!\\^)/,end);\n        if(sup) {\n            sup_expr = this.unbracket(this.simple(sup.end));\n            if(sup_expr) {\n                tex = `${tex}^{${sup_expr.tex}}`;\n                end = sup_expr.end;\n            } else {\n                tex = `${tex}^{}`;\n                end = sup.end;\n            }\n        }\n        if(sub || sup) {\n            return {tex: tex, pos: pos, end: end, ttype: 'subsup', sub: sub_expr, sup: sup_expr};\n        }\n    }\n\n    // S ::= v | lEr | uS | bSS             Simple expression\n    simple(pos = 0) {\n        return this.longest([this.matrix(pos), this.bracketed_expression(pos), this.binary(pos), this.constant(pos), this.text(pos), this.unary(pos), this.negative_simple(pos)]);\n    }\n\n    negative_simple(pos = 0) {\n        const dash = this.exact(\"-\",pos);\n        if(dash && !this.other_constant(pos)) {\n            const expr = this.simple(dash.end);\n            if(expr) {\n                return {tex: `- ${expr.tex}`, pos: pos, end: expr.end, ttype: 'negative_simple', dash: dash, expr: expr}\n            } else {\n                return {tex: '-', pos: pos, end: dash.end, ttype: 'constant'};\n            }\n        }\n    }\n\n    // matrix: leftbracket \"(\" expr \")\" (\",\" \"(\" expr \")\")* rightbracket\n    // each row must have the same number of elements\n    matrix(pos = 0) {\n        let left = this.left_bracket(pos);\n        let lr = false;\n        if(!left) {\n            left = this.leftright_bracket(pos,'left');\n            if(!left) {\n                return;\n            }\n            lr = true;\n        }\n        const contents = this.matrix_contents(left.end, lr);\n        if(!contents) {\n            return;\n        }\n        const right = lr ? this.leftright_bracket(contents.end, 'right') : this.right_bracket(contents.end);\n        if(!right) {\n            return;\n        }\n        const contents_tex = contents.rows.map(r=>r.tex).join(' \\\\\\\\ ');\n        const matrix_tex = contents.is_array ? `\\\\begin{array}{${contents.column_desc}} ${contents_tex} \\\\end{array}` : `\\\\begin{matrix} ${contents_tex} \\\\end{matrix}`;\n        return {tex: `\\\\left ${left.tex} ${matrix_tex} \\\\right ${right.tex}`, pos: pos, end: right.end, ttype: 'matrix', rows: contents.rows, left: left, right: right};\n    }\n\n    matrix_contents(pos = 0, leftright = false) {\n        let rows = [];\n        let end = pos;\n        let row_length = undefined;\n        let column_desc = undefined;\n        let is_array = false;\n        while(!this.eof(end) && !(leftright ? this.leftright_bracket(end) : this.right_bracket(end))) {\n            if(rows.length) {\n                const comma = this.exact(\",\",end);\n                if(!comma) {\n                    return;\n                }\n                end = comma.end;\n            }\n            const lb = this.match(/^[(\\[]/,end);\n            if(!lb) {\n                return;\n            }\n\n            const cells = [];\n            const columns = [];\n            end = lb.end;\n            while(!this.eof(end)) {\n                if(cells.length) {\n                    const comma = this.exact(\",\",end);\n                    if(!comma) {\n                        break;\n                    }\n                    end = comma.end;\n                }\n                const cell = this.matrix_cell(end);\n                if(!cell) {\n                    break;\n                }\n                if(cell.ttype=='column') {\n                    columns.push('|');\n                    is_array = true;\n                    if(cell.expr!==null) {\n                        columns.push('r');\n                        cells.push(cell.expr);\n                    }\n                } else {\n                    columns.push('r');\n                    cells.push(cell);\n                }\n                end = cell.end;\n            }\n            if(!cells.length) {\n                return;\n            }\n            if(row_length===undefined) {\n                row_length = cells.length;\n            } else if(cells.length!=row_length) {\n                return;\n            }\n            const rb = this.match(/^[)\\]]/,end);\n            if(!rb) {\n                return;\n            }\n            const row_column_desc = columns.join('');\n            if(column_desc===undefined) {\n                column_desc = row_column_desc;\n            } else if(row_column_desc!=column_desc) {\n                return;\n            }\n            rows.push({ttype: 'row', tex: cells.map(c=>c.tex).join(' & '), pos: lb.end, end: end, cells: cells});\n            end = rb.end;\n        }\n        if(row_length===undefined || (row_length<=1 && rows.length<=1)) {\n            return;\n        }\n        return {rows: rows, end: end, column_desc: column_desc, is_array: is_array};\n    }\n\n    matrix_cell(pos = 0) {\n        const lvert = this.exact('|',pos);\n        if(lvert) {\n            const middle = this.expression(lvert.end);\n            if(middle) {\n                const rvert = this.exact('|',middle.end);\n                if(rvert) {\n                    const second = this.expression(rvert.end);\n                    if(second) {\n                        return {tex: `\\\\left \\\\lvert ${middle.tex} \\\\right \\\\rvert ${second.text}`, pos: lvert.pos, end: second.end, ttype: 'expression', exprs: [middle,second]};\n                    }\n                } else {\n                    return {ttype: 'column', expr: middle, pos: lvert.pos, end: middle.end};\n                }\n            } else {\n                return {ttype: 'column', expr: null, pos: lvert.pos, end: lvert.end}\n            }\n        }\n        return this.expression(pos);\n    }\n\n    bracketed_expression(pos = 0) {\n        const l = this.left_bracket(pos);\n        if(l) {\n            const middle = this.expression_list(l.end);\n            if(middle) {\n                const r = this.right_bracket(middle.end) || this.leftright_bracket(middle.end,'right');\n                if(r) {\n                    return {tex: `\\\\left${l.tex} ${middle.tex} \\\\right ${r.tex}`, pos: pos, end: r.end, bracket: true, left: l, right: r, middle: middle, ttype: 'bracket'};\n                } else if(this.eof(middle.end)) {\n                    return {tex: `\\\\left${l.tex} ${middle.tex} \\\\right.`, pos: pos, end: middle.end, ttype: 'bracket', left: l, right: null, middle: middle};\n                } else {\n                    return {tex: `${l.tex} ${middle.tex}`, pos: pos, end: middle.end, ttype: 'expression', exprs: [l,middle]};\n                }\n            } else {\n                const r = this.right_bracket(l.end) || this.leftright_bracket(l.end,'right');\n                if(r) {\n                    return {tex: `\\\\left ${l.tex} \\\\right ${r.tex}`, pos: pos, end: r.end, bracket: true, left: l, right: r, middle: null, ttype: 'bracket'};\n                } else {\n                    return {tex: l.tex, pos: pos, end: l.end, ttype: 'constant'};\n                }\n            }\n        }\n        if(this.other_constant(pos)) {\n            return;\n        }\n        const left = this.leftright_bracket(pos, 'left');\n        if(left) {\n            const middle = this.expression_list(left.end);\n            if(middle) {\n                const right = this.leftright_bracket(middle.end, 'right') || this.right_bracket(middle.end);\n                if(right) {\n                    return {tex: `\\\\left ${left.tex} ${middle.tex} \\\\right ${right.tex}`, pos: pos, end: right.end, bracket: true, left: left, right: right, middle: middle, ttype: 'bracket'};\n                }\n            }\n        }\n    }\n\n    // r ::= ) | ] | } | :) | :} | other right brackets\n    right_bracket(pos = 0) {\n        for(let bracket of this.right_brackets) {\n            const m = this.exact(bracket.asciimath,pos);\n            if(m) {\n                return {tex: bracket.tex, pos: pos, end: m.end, asciimath: bracket.asciimath, def: bracket, ttype: 'right_bracket'};\n            }\n        }\n    }\n\n    // l ::= ( | [ | { | (: | {: | other left brackets\n    left_bracket(pos = 0) {\n        for(let bracket of this.left_brackets) {\n            const m = this.exact(bracket.asciimath,pos);\n            if(m) {\n                return {tex: bracket.tex, pos: pos, end: m.end, asciimath: bracket.asciimath, ttype: 'left_bracket'};\n            }\n        }\n    }\n\n    leftright_bracket(pos = 0,position) {\n        for(let lr of this.leftright_brackets) {\n            const b = this.exact(lr.asciimath, pos);\n            if(b) {\n                return {tex: position=='left' ? lr.left_tex : position=='right' ? lr.right_tex : lr.free_tex, pos: pos, end: b.end, ttype: 'leftright_bracket'};\n            }\n        }\n    }\n\n    text(pos = 0) {\n        const quoted = this.match(/^\"([^\"]*)\"/,pos);\n        if(quoted) {\n            const text = this.escape_text(quoted.match[1]);\n            return {tex: `\\\\text{${text}}`, pos: pos, end: quoted.end, ttype: 'text', text: text};\n        }\n        const textfn = this.match(/^(?:mbox|text)\\s*(\\([^)]*\\)?|\\{[^}]*\\}?|\\[[^\\]]*\\]?)/,pos);\n        if(textfn) {\n            const text = this.escape_text(textfn.match[1].slice(1,textfn.match[1].length-1));\n            return {tex: `\\\\text{${text}}`, pos: pos, end: textfn.end, ttype: 'text', text: text};\n        }\n    }\n\n    // b ::= frac | root | stackrel | other binary symbols\n    binary(pos = 0) {\n        for(let binary of this.binary_symbols) {\n            const m = this.exact(binary.asciimath, pos);\n            const [lb1,rb1] = binary.option ? ['[',']'] : ['{','}'];\n            if(m) {\n                const a = this.unbracket(this.simple(m.end));\n                if(a) {\n                    const atex = binary.rawfirst ? a.middle_asciimath : a.tex;\n                    const b = this.unbracket(this.simple(a.end));\n                    if(b) {\n                        return {tex: `${binary.tex}${lb1}${atex}${rb1}{${b.tex}}`, pos: pos, end: b.end, ttype: 'binary', op: binary, arg1: a, arg2: b};\n                    } else {\n                        return {tex: `${binary.tex}${lb1}${atex}${rb1}{}`, pos: pos, end: a.end, ttype: 'binary', op: binary, arg1: a, arg2: null};\n                    }\n                } else {\n                    return {tex: `${binary.tex}${lb1}${rb1}{}`, pos: pos, end: m.end, ttype: 'binary', op: binary, arg1: null, arg2: null};\n                }\n            }\n        }\n    }\n\n    // u ::= sqrt | text | bb | other unary symbols for font commands\n    unary(pos = 0) {\n        for(let u of this.unary_symbols) {\n            const m = this.exact(u.asciimath, pos);\n            if(m) {\n                const ss = this.subsup(m.end);\n                const sstex = ss ? ss.tex : '';\n                const end = ss ? ss.end : m.end;\n                const barg = this.simple(end);\n                const arg = u.func ? barg : this.unbracket(barg);\n                const argtex = arg && (u.raw ? arg.middle_asciimath : arg.tex);\n                if(u.rewriteleftright) {\n                    const [left,right] = u.rewriteleftright;\n                    if(arg) {\n                        return {tex: `\\\\left ${left} ${argtex} \\\\right ${right} ${sstex}`, pos: pos, end: arg.end, ttype: 'unary', op: m, subsup: ss, arg: arg};\n                    } else {\n                        return {tex: `\\\\left ${left} \\\\right ${right} ${sstex}`, pos: pos, end: m.end, ttype: 'unary', op: m, subsup: ss, arg: null};\n                    }\n                } else {\n                    if(arg) {\n                        return {tex: `${u.tex}${sstex}{${argtex}}`, pos: pos, end: arg.end, ttype: 'unary', op: m, subsup: ss, arg: arg};\n                    } else {\n                        return {tex: `${u.tex}${sstex}{}`, pos: pos, end: m.end, ttype: 'unary', op: m, subsup: ss, arg: null};\n                    }\n                }\n            }\n        }\n    }\n\n    // v ::= [A-Za-z] | greek letters | numbers | other constant symbols\n    constant(pos = 0) {\n        if(this.right_bracket(pos)) {\n            return;\n        }\n        return this.longest([this.other_constant(pos), this.greek(pos), this.name(pos), this.number(pos), this.arbitrary_constant(pos)]);\n    }\n\n    name(pos = 0) {\n        return this.literal(this.match(/^[A-Za-z]/, pos));\n    }\n\n    greek(pos = 0) {\n        const re_greek = new RegExp('^('+this.greek_letters.join('|')+')');\n        const m = this.match(re_greek, pos);\n        if(m) {\n            return {tex: '\\\\'+m.token, pos: pos, end: m.end, ttype: 'greek'};\n        }\n    }\n\n    number(pos = 0) {\n        const re_number = new RegExp('^\\\\d+('+this.decimalsign+'\\\\d+)?');\n        return this.literal(this.match(re_number, pos));\n    }\n\n    other_constant(pos = 0) {\n        for(let sym of this.constants) {\n            let m = this.exact(sym.asciimath, pos);\n            if(m) {\n                return {tex: `${sym.tex}`, pos: m.pos, end: m.end, ttype: 'other_constant'};\n            }\n        }\n        for(let sym of this.relations) {\n            if(!sym.asciimath.match(/^!/)) {\n                let notm = this.exact('!'+sym.asciimath, pos);\n                if(notm) {\n                    return {tex: `\\\\not ${sym.tex}`, pos: notm.pos, end: notm.end, ttype: 'other_constant'};\n                }\n            }\n        }\n    }\n\n    arbitrary_constant(pos = 0) {\n        if(!this.eof(pos)) {\n            if(this.exact(\",\",pos)) {\n                return;\n            }\n            for(let nc of this.non_constant_symbols.concat(this.left_brackets.map(x=>x.asciimath), this.right_brackets.map(x=>x.asciimath), this.leftright_brackets.map(x=>x.asciimath))) {\n                if(this.exact(nc, pos)) {\n                    return;\n                }\n            }\n            const spos = this.strip_space(pos);\n            const symbol = this.source(spos).slice(0,1);\n            return {tex: symbol, pos: pos, end: spos+1, ttype: 'arbitrary_constant'};\n        }\n    }\n}\n","import {Classes, Dialog, Tab, Tabs} from \"@blueprintjs/core\";\nimport React, {useMemo} from \"react\";\nimport {useProtofunction} from \"../ProtofunctionContext\";\nimport \"./InfoDialog.css\"\n\ninterface InfoDialogProps {\n    isOpen: boolean\n    closeCallback: () => void;\n    pfId: number\n}\n\nexport const InfoDialog: React.FC<InfoDialogProps> = (props) => {\n    const [pf, updatePf] = useProtofunction(props.pfId)\n    const disassembly = useMemo(() => {\n        if (pf.jitFunction) {\n            const mod = ccall(\"BinaryenModuleRead\", \"number\", [\"number\", \"number\"],\n                [pf.jitFunction.getModule(), pf.jitFunction.getModuleLen()])\n            const ptr = ccall(\"BinaryenModuleAllocateAndWriteText\", \"number\", [\"number\"], [mod])\n            const disassembly = UTF8ToString(ptr)\n            Module._free(ptr)\n            ccall(\"BinaryenModuleDispose\", null, [\"number\"], [mod])\n            return disassembly\n        } else {\n            return \"module is not compiled!\"\n        }\n    }, [pf.jitFunction])\n\n    return <Dialog className=\"bp3-dark info-dialog\" title=\"Function Info\" isOpen={props.isOpen} onClose={props.closeCallback}>\n        <Tabs id=\"InfoTabs\" className={Classes.DIALOG_BODY} vertical={true}>\n            <Tab id=\"disassembly\" title=\"Disassembly\" panel={<div className={Classes.CODE_BLOCK} >\n                    <pre>{disassembly}</pre>\n                </div>}/>\n        </Tabs>\n    </Dialog>\n}","import React, {useCallback, useContext, useEffect, useRef, useState} from \"react\";\nimport {useProtofunction} from \"../ProtofunctionContext\";\nimport AsciiMathParser from \"../AsciiMathParser\";\nimport katex from \"katex\"\nimport {ExpressionParser} from \"../ExpressionParser\";\nimport {Button, Classes, Dialog, Intent} from \"@blueprintjs/core\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\"\nimport \"../BP3Restyler.css\"\nimport {InfoDialog} from \"./InfoDialog\";\nimport {JITFunction} from \"../NativeAccess\";\n\ninterface FunctionEntryProps {\n    n: number\n    removeCallback: () => void\n    parser: AsciiMathParser\n    drawCallback: (id: number, remove: boolean) => void\n}\n\nconst jitCache: Record<string, JITFunction> = {}\n\nexport const FunctionEntry: React.FC<FunctionEntryProps> = (props) => {\n    const [pf, updatePf] = useProtofunction(props.n)\n    const inputRef = useRef<HTMLInputElement>(null)\n    const prettyRef = useRef<HTMLDivElement>(null)\n    const [compiling, setCompiling] = useState(false)\n    const [functionSourceOpen, setFunctionSourceOpen] = useState(false)\n\n    useEffect(() => {\n        if (inputRef.current && prettyRef.current) {\n            props.parser.input(inputRef.current.value)\n            const result = props.parser.consume()\n            katex.render(result.tex, prettyRef.current, {throwOnError: false, displayMode: true})\n            if (result.exprs[0]) {\n                const semanticParser = new ExpressionParser()\n                semanticParser.visit(result.exprs[0])\n                updatePf({\n                    name: semanticParser.functionName,\n                    parameterName: semanticParser.functionArg,\n                    text: inputRef.current.value,\n                    stack: semanticParser.stack,\n                    functionName: semanticParser.generateFunctionName()\n                })\n                if (semanticParser.error) {\n                    console.error(semanticParser.error)\n                } else {\n                    console.log(semanticParser.stack)\n                }\n            }\n        }\n    }, [pf.text, props.parser])\n\n    useEffect(() => {\n        if (pf.drawing) {\n            if (!pf.jitFunction || (pf.jitFunction.getName() !== pf.functionName)) {\n                if (!jitCache[pf.functionName]) {\n                    const metafactory = new Module.FunctionMetafactory(pf.name, pf.parameterName, pf.id, pf.functionName)\n                    metafactory.visitStack(pf.stack)\n                    const func = metafactory.visitEnd()\n                    func.install()\n                    jitCache[pf.functionName] = func\n                    updatePf({jitFunction: func})\n                } else {\n                    updatePf({jitFunction: jitCache[pf.functionName]})\n                }\n                props.drawCallback(pf.id, false)\n            }\n        }\n\n        // we don't automatically recompile (yet)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [pf.drawing])\n\n    return (<div className=\"function-entry-container\">\n        <div className=\"function-control-panel\">\n            <button className=\"function-color-button\" style={{backgroundColor: pf.style.stroke}} onClick={(event => {\n                const newColor = `hsla(${Math.random() * 360}, 80%, 60%, 1)`;\n                updatePf({style: {stroke: newColor}})\n            })} />\n\n            <Button id=\"compile-function\" minimal icon=\"play\" disabled={!pf.stack || pf.stack.length === 0} loading={pf.drawing} onClick={event => {\n                if (pf.jitFunction && pf.jitFunction.getName() !== pf.functionName) {\n                    props.drawCallback(pf.id, true)\n                }\n                updatePf({drawing: true})\n            }} intent={pf.jitFunction ? (pf.jitFunction.getName() === pf.functionName ? Intent.NONE : Intent.WARNING) : Intent.NONE}/>\n\n            <Button minimal icon=\"cog\" disabled={!pf.jitFunction} onClick={event => setFunctionSourceOpen(true)} />\n        </div>\n        <input ref={inputRef} className=\"function-input-line\" onInput={(event) => updatePf({text: (event.target as HTMLInputElement).value})}/>\n        <div ref={prettyRef} className=\"function-pretty\" />\n\n        <InfoDialog isOpen={functionSourceOpen} closeCallback={() => setFunctionSourceOpen(false)} pfId={props.n} />\n    </div>)\n}\n","import React, {useCallback, useContext, useEffect, useState} from \"react\";\nimport \"./FunctionEntry\"\nimport {FunctionEntry} from \"./FunctionEntry\";\nimport \"./LeftSidebar.css\"\nimport AsciiMathParser from \"../AsciiMathParser\";\n\ninterface SidebarProps {\n    drawCallback: (id: number, remove: boolean) => void\n}\n\nexport const LeftSidebar: React.FC<SidebarProps> = (props) => {\n    const parser = new AsciiMathParser()\n\n    return <div className=\"left-sidebar\">\n        <p>there will be something here eventually i promise</p>\n        <FunctionEntry n={0} removeCallback={() => {}} parser={parser} drawCallback={props.drawCallback}/>\n        </div>\n}\n","import {complex, ptr} from \"./GlamContext\";\nimport {Protofunction} from \"./ProtofunctionContext\";\n\nexport interface Signal {\n    signalName: string\n    _dataType: (t: any) => void\n}\n\nexport type SS<T> = (data: T) => Signal\n\nfunction _build<T>(name: string, extra = {}): SS<T> {\n    return (data: T) => {\n        return {\n            signalName: name,\n            ...data,\n            ...extra,\n            _dataType: (t: T) => {}\n        }\n    };\n}\n\nexport const SigReady: SS<{}> = _build(\"Ready\")\nexport const SigArcFocus: SS<{arc: number}> = _build(\"ArcFocus\")\nexport const SigTreeRecalculate: SS<{root: string, value: complex}> = _build(\"TreeRecalculate\")\n","import {useProtofunction} from \"../ProtofunctionContext\";\nimport React, {CSSProperties, useCallback, useContext, useEffect, useMemo, useReducer} from \"react\";\nimport {ptr, SignalContext} from \"../GlamContext\";\nimport {SigArcFocus} from \"../Signals\";\nimport {f64BufferView} from \"../NativeAccess\";\nimport \"./PlotObject.css\"\n\ninterface PlotArcProps {\n    pfId: number\n    limits: [number, number]\n    res: number\n}\n\nexport const PlotArc: React.FC<PlotArcProps> = (props) => {\n    const [pf, updatePf] = useProtofunction(props.pfId);\n    const [ctx, dispatch] = useContext(SignalContext);\n\n    const [multipoint, updateMultipoint] = useReducer((mp: ptr) => {\n        if (!pf.jitFunction) {\n            throw Error(\"cannot create an arc from an uncompiled protofunction\")\n        }\n\n        if (mp !== 0) {\n            Module._free(mp);\n        }\n        return Module.reqR2CMultipoint(pf.name, props.limits[0], props.limits[1], props.res, pf.jitFunction)\n    }, 0)\n\n    useEffect(() => {\n        updateMultipoint()\n    }, [pf.jitFunction])\n\n    useEffect(() => {\n        if (pf.drawing) {\n            updatePf({drawing: false})\n        }\n    })\n\n    useEffect(() => {\n        return () => Module._free(multipoint)\n    }, [multipoint])\n\n    useEffect(() => {}, [props.limits, props.res]) // todo expand multipoint\n\n    const points = useMemo(() => {\n        const [ptr, len] = Module.r2cMultipointGetPoints(multipoint)\n        return f64BufferView(ptr, len)\n    }, [multipoint]); // this also needs to check for memory growth bc that might move the buffer in memory\n\n    return (<polyline id={`plot-arc-${props.pfId}`} className=\"plot-arc\" strokeWidth={2} fill=\"none\" style={pf.style} points={points.join(\",\")} onMouseOver={() => {\n        dispatch(SigArcFocus({arc: props.pfId}))\n    }} onMouseOut={() => dispatch(SigArcFocus({arc: -1}))}/>)\n}\n","import {f64, i32, ptr} from \"./GlamContext\";\nimport {StackObject} from \"./ExpressionParser\";\n\nexport type JSBuffer = [ptr, i32]\nexport type JITResult = [string, number, number]; // function name, module base, module length\n\ninterface FunctionMetafactory {\n    new(name: string, parameterName: string, id: number, functionName: string): FunctionMetafactory\n\n    visitFunction(): void\n    visitStack(stack: StackObject[]): void\n    visit(obj: StackObject): void\n    visitEnd(): JITFunction\n    isIdentifierKnown(str: string): boolean\n    delete(): void\n}\n\nexport interface JITFunction {\n    install(): void\n    getHandle(): ptr\n    getName(): string\n    getModule(): ptr\n    getModuleLen(): number\n    delete(): void\n    cleanup(): void;\n}\n\nexport interface GlamCore extends EmscriptenModule {\n    testGetUnitCircle(): JSBuffer\n    reqR2CMultipoint(name: string, from: number, to: number, res: number, jitFunc: JITFunction): ptr;\n    r2cMultipointGetPoints(mp: ptr): JSBuffer;\n\n    FunctionMetafactory: FunctionMetafactory\n\n    _jit_morpheme_base: ptr\n    _jit_morpheme_add: ptr\n    _jit_morpheme_sub: ptr\n    _jit_morpheme_mul: ptr\n    _jit_morpheme_div: ptr\n    _jit_morpheme_exp: ptr\n}\n\ndeclare global {\n    let Module: GlamCore\n    let wasmMemory: WebAssembly.Memory\n    let wasmTable: WebAssembly.Table\n}\n\nexport function f64BufferView(address: ptr, len: i32) {\n    return Module.HEAPF64.subarray(address / 8, (address / 8) + len)\n}\n","import React, {useContext, useEffect, useRef, useState} from \"react\";\nimport \"./PlotGrid.css\"\nimport {PlotArc} from \"./PlotArc\";\n\nexport interface PlotGridProps {\n    majorTicks: number // math units between each major tick\n    minorTicks: number // minor ticks per major tick\n    limits: [number, number, number, number] // in math units\n    drawList: number[]\n}\n\nexport const PlotGrid: React.FC<PlotGridProps> = (props) => {\n    const container = useRef<HTMLDivElement>(null);\n    const [gridSteps, setGridSteps] = useState(0);\n    const [originGridCoords, setOriginGridCoords] = useState<[number, number]>([0, 0]);\n    const [nMajorTicks, setNMajorTicks] = useState([0, 0])\n\n    const mathCoordsToGrid = ([x, y]: [number, number]): [number, number] => {\n        return [(x * gridSteps) + originGridCoords[0], originGridCoords[1] - (y * gridSteps)];\n    }\n\n    useEffect(() => {\n        if (!container.current) {\n            return;\n        }\n\n        const viewportCenter = [container.current.offsetWidth / 2, container.current.offsetHeight / 2]\n\n        const _gridSteps = Math.min(container.current.offsetWidth / (props.limits[1] - props.limits[0]), container.current.offsetHeight / (props.limits[3] - props.limits[2]));\n        setNMajorTicks([Math.ceil(container.current.offsetWidth / _gridSteps), Math.ceil(container.current.offsetHeight / _gridSteps)])\n\n        const _originGridCoords: [number, number] = [viewportCenter[0], viewportCenter[1]]\n        setGridSteps(_gridSteps)\n        setOriginGridCoords(_originGridCoords)\n\n    }, [props])\n\n    return (<div ref={container} className=\"plot-grid-container\">\n        <svg className=\"plot-space\" width=\"100%\" height=\"100%\"\n             viewBox={`${props.limits[0]} ${props.limits[1]} ${props.limits[2] - props.limits[0]} ${props.limits[3] - props.limits[1]}`}\n             preserveAspectRatio=\"xMidYMid slice\">\n            <g className=\"coordinate-y-flip\">\n                <PlotAxes limits={props.limits} majorInterval={props.majorTicks} minorTicksPerMajor={props.minorTicks} hideMinorGrid={false} />\n                {props.drawList.map(id => <PlotArc key={id} pfId={id} limits={[0,2*Math.PI]} res={50} />)}\n            </g>\n        </svg>\n    </div>)\n}\n\nexport interface PlotAxisProps {\n    limits: [number, number, number, number]\n    majorInterval: number\n    minorTicksPerMajor: number\n    hideMinorGrid: boolean\n}\n\nconst PlotAxes: React.FC<PlotAxisProps> = (props) => {\n    const minorInterval = props.majorInterval / props.minorTicksPerMajor;\n\n    return (<>\n            <defs>\n                <pattern id=\"grid-lines-minor\" width={minorInterval}\n                         height={minorInterval}\n                         patternUnits=\"userSpaceOnUse\">\n                    <path className=\"plot-grid-minor-line\" d={`M ${minorInterval} 0 L 0 0 0 ${minorInterval}`}/>\n                </pattern>\n                <pattern id=\"grid-lines-major\" width={props.majorInterval} height={props.majorInterval} patternUnits=\"userSpaceOnUse\">\n                    {props.hideMinorGrid ? <></> : <rect width={props.majorInterval} height={props.majorInterval} fill=\"url(#grid-lines-minor)\"/>}\n                    <path className=\"plot-grid-major-line\" d={`M ${props.majorInterval} 0 L 0 0 0 ${props.majorInterval}`}/>\n                </pattern>\n            </defs>\n\n            <rect x={props.limits[0]} y={props.limits[1]} width=\"100%\" height=\"100%\" fill=\"url(#grid-lines-major)\" />\n\n            <line className=\"plot-grid-axis-line\" x1={props.limits[0]} y1=\"0\" x2={props.limits[2]} y2=\"0\" />\n            <line className=\"plot-grid-axis-line\" x1=\"0\" y1={props.limits[1]} x2=\"0\" y2={props.limits[3]} />\n\n            {[...Array(Math.ceil(props.limits[2] / props.majorInterval)).keys()].map(n => n+1).map(n => {\n                return <text key={n + \",0\"} className=\"plot-grid-major-label\" x={n} y=\"0\" fontSize=\"0.1\">{n}</text>\n            })}\n\n            {[...Array(Math.ceil(Math.abs(props.limits[0] / props.majorInterval))).keys()].map(n => n+1).map(n => {\n                return <text key={\"-\" + n + \",0\"} className=\"plot-grid-major-label\" x={-n} y=\"0\" fontSize=\"0.1\">-{n}</text>\n            })}\n\n\n            {[...Array(Math.ceil(props.limits[3] / props.majorInterval)).keys()].map(n => n+1).map(n => {\n                return <text key={\"0,\" + n}className=\"plot-grid-major-label\" x=\"0\" y={n} fontSize=\"0.1\">-{n}i</text>\n            })}\n\n            {[...Array(Math.ceil(Math.abs(props.limits[1] / props.majorInterval))).keys()].map(n => n+1).map(n => {\n                return <text key={\"0,-\" + n} className=\"plot-grid-major-label\" x=\"0\" y={-n} fontSize=\"0.1\">{n}i</text>\n            })}\n    </>)\n}\n","import {GlamAppContextProvider} from \"../GlamContext\";\nimport {ProtofunctionContextProvider} from \"../ProtofunctionContext\";\nimport {LeftSidebar} from \"./LeftSidebar\";\nimport {PlotGrid} from \"./PlotGrid\";\nimport React, {useCallback, useState} from \"react\";\nimport {JITFunction} from \"../NativeAccess\";\n\nexport const GraphController: React.FC = (props) => {\n    const [drawList, setDrawList] = useState<number[]>([])\n    const draw = useCallback((pfId: number, remove: boolean = false) => {\n        if (remove) {\n            setDrawList(drawList.filter(n => n !== pfId))\n        } else if (!drawList.includes(pfId)) {\n            setDrawList([...drawList, pfId])\n        }\n    }, [drawList, setDrawList])\n\n    return (<>\n        <GlamAppContextProvider>\n            <ProtofunctionContextProvider>\n                <LeftSidebar drawCallback={draw} />\n                <PlotGrid majorTicks={1} minorTicks={5} limits={[-4, -4, 4, 4]} drawList={drawList}/>\n            </ProtofunctionContextProvider>\n        </GlamAppContextProvider>\n    </>)\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport \"./NativeAccess\"\nimport {GraphController} from \"./components/GraphController\";\n\nwindow.addEventListener(\"nativeInit\", () => {\n    ReactDOM.render(<GraphController />,\n        document.querySelector(\".glam-app-container\")\n    );\n})\n\nreportWebVitals(console.log);\n"],"sourceRoot":""}